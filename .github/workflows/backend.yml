name: Backend Workflow

on:
  push:
    paths:
      - 'upload-proxy/**'
      - '.github/workflows/backend.yml'
  pull_request:
    paths:
      - 'upload-proxy/**'
      - '.github/workflows/backend.yml'

jobs:
  backend-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          upload-proxy/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install Rust dependencies
      run: |
        cd upload-proxy
        cargo fetch
        
    - name: Check Rust code
      run: |
        cd upload-proxy
        echo "Checking Rust code..."
        cargo check
        echo "‚úÖ Rust code compiles successfully"
        
    - name: Run Rust tests
      run: |
        cd upload-proxy
        echo "Running Rust tests..."
        cargo test
        echo "‚úÖ All tests passed"
        
    - name: Build Rust project
      run: |
        cd upload-proxy
        echo "Building Rust project..."
        cargo build --release
        echo "‚úÖ Project builds successfully"
        
    - name: Check for security vulnerabilities
      run: |
        cd upload-proxy
        echo "Checking for security vulnerabilities..."
        cargo audit --version || cargo install cargo-audit
        cargo audit
        echo "‚úÖ No security vulnerabilities found"
        
    - name: Validate Cargo.toml
      run: |
        cd upload-proxy
        echo "Validating Cargo.toml..."
        
        # Check if required dependencies are present
        required_deps=("actix-web" "actix-multipart" "serde" "tokio" "jsonwebtoken")
        for dep in "${required_deps[@]}"; do
          if grep -q "$dep" Cargo.toml; then
            echo "‚úÖ $dep dependency found"
          else
            echo "‚ùå $dep dependency missing"
            exit 1
          fi
        done
        
        echo "‚úÖ Cargo.toml validation passed"
        
    - name: Check source code structure
      run: |
        cd upload-proxy/src
        echo "Checking source code structure..."
        
        required_files=("main.rs" "auth.rs" "handlers.rs" "metadata.rs")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file is missing"
            exit 1
          fi
        done
        
        echo "‚úÖ Source code structure is correct"
        
    - name: Validate Dockerfile
      run: |
        cd upload-proxy
        echo "Validating Dockerfile..."
        
        if [ -f "Dockerfile" ]; then
          echo "‚úÖ Dockerfile exists"
          
          # Check for required Dockerfile components
          if grep -q "FROM rust" Dockerfile; then
            echo "‚úÖ Uses Rust base image"
          else
            echo "‚ùå Missing Rust base image"
            exit 1
          fi
          
          if grep -q "COPY.*Cargo.toml" Dockerfile; then
            echo "‚úÖ Copies Cargo.toml"
          else
            echo "‚ùå Missing Cargo.toml copy"
            exit 1
          fi
          
          if grep -q "COPY.*src" Dockerfile; then
            echo "‚úÖ Copies source code"
          else
            echo "‚ùå Missing source code copy"
            exit 1
          fi
          
          if grep -q "EXPOSE.*3000" Dockerfile; then
            echo "‚úÖ Exposes port 3000"
          else
            echo "‚ùå Missing port 3000 exposure"
            exit 1
          fi
          
        else
          echo "‚ùå Dockerfile is missing"
          exit 1
        fi
        
    - name: Check for required endpoints
      run: |
        cd upload-proxy/src
        echo "Checking for required API endpoints..."
        
        # Check for upload endpoint
        if grep -q "upload" handlers.rs; then
          echo "‚úÖ Upload endpoint found"
        else
          echo "‚ùå Upload endpoint missing"
          exit 1
        fi
        
        # Check for health endpoint
        if grep -q "health" handlers.rs; then
          echo "‚úÖ Health endpoint found"
        else
          echo "‚ùå Health endpoint missing"
          exit 1
        fi
        
        # Check for token validation
        if grep -q "validate_token" auth.rs; then
          echo "‚úÖ Token validation found"
        else
          echo "‚ùå Token validation missing"
          exit 1
        fi
        
        # Check for metadata logging
        if grep -q "log_upload_metadata" metadata.rs; then
          echo "‚úÖ Metadata logging found"
        else
          echo "‚ùå Metadata logging missing"
          exit 1
        fi
        
    - name: Check environment variables
      run: |
        cd upload-proxy
        echo "Checking environment variable usage..."
        
        required_env_vars=("KEYCLOAK_URL" "CLIENT_ID" "CLIENT_SECRET" "UPLOADS_DIR" "METADATA_FILE")
        for var in "${required_env_vars[@]}"; do
          if grep -q "$var" src/*.rs; then
            echo "‚úÖ $var environment variable used"
          else
            echo "‚ùå $var environment variable not found"
            exit 1
          fi
        done
        
        echo "‚úÖ All required environment variables are used"
        
    - name: Run clippy (Rust linter)
      run: |
        cd upload-proxy
        echo "Running clippy..."
        cargo clippy -- -D warnings
        echo "‚úÖ Clippy checks passed"
        
    - name: Check code formatting
      run: |
        cd upload-proxy
        echo "Checking code formatting..."
        cargo fmt -- --check
        echo "‚úÖ Code formatting is correct"
        
    - name: Backend Summary
      run: |
        echo "üéâ Backend workflow completed successfully!"
        echo "‚úÖ Rust code compiles"
        echo "‚úÖ All tests pass"
        echo "‚úÖ Project builds successfully"
        echo "‚úÖ No security vulnerabilities"
        echo "‚úÖ Dependencies validated"
        echo "‚úÖ Source structure correct"
        echo "‚úÖ Dockerfile validated"
        echo "‚úÖ API endpoints present"
        echo "‚úÖ Environment variables configured"
        echo "‚úÖ Code quality checks passed"
